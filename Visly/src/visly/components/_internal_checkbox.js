// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useCallback, useRef } from "react";
import {
  exists,
  useRootProps,
  useEventHandlers,
  combineRef,
  renderChildren,
  InteractionState,
} from "./_internal_utils";
import { useHotkey } from "./_internal_utils_hotkeys";
export function CheckboxRoot(props) {
  const ref = useRef();
  const { states, handlers } = useEventHandlers({
    ref,
    ...props,
  });
  const {
    style,
    className,
    testId,
    innerRef,
    values,
    reactProps,
  } = useRootProps(props, states);
  const checked = props.checked;
  const noSelectStyles = exists(props.onChange)
    ? {
        cursor: "pointer",
        userSelect: "none",
        WebkitUserSelect: "none",
        KhtmlUserSelect: "none",
        MozUserSelect: "none",
      }
    : {};
  const disabled = states.includes(InteractionState.Disabled);
  const hotkey = useHotkey(
    {
      key: "space",
      allowInput: true,
      disabled,
    },
    () => ref.current.click()
  );

  const onKeyUp = (e) => {
    if (exists(handlers.onKeyUp)) {
      handlers.onKeyUp(e);
    }

    hotkey.onKeyUp(e);
  };

  const onKeyDown = (e) => {
    if (exists(handlers.onKeyDown)) {
      handlers.onKeyDown(e);
    }

    hotkey.onKeyDown(e);
  };

  const onClick = useCallback(
    (e) => {
      if (exists(handlers.onClick)) {
        handlers.onClick(e);
      }

      if (exists(props.onChange)) {
        props.onChange(!checked);
      }
    },
    [props, checked, handlers]
  );
  return (
    <div
      role="checkbox"
      tabIndex={0}
      ref={combineRef(props.measureRef, combineRef(innerRef, ref))}
      data-testid={testId}
      {...reactProps}
      {...handlers}
      onClick={onClick}
      onKeyDown={onKeyDown}
      onKeyUp={onKeyUp}
      className={className}
      style={{ ...noSelectStyles, ...style }}
      aria-checked={checked}
    >
      {renderChildren(props.children, values)}
    </div>
  );
}
