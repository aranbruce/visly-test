// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useRef } from "react";
import {
  useRootProps,
  useEventHandlers,
  exists,
  combineRef,
  renderChildren,
  InteractionState,
} from "./_internal_utils";
import { mergeHotkeys, useHotkey } from "./_internal_utils_hotkeys";
import { useSpacing } from "./_internal_component_utils";
export function ButtonRoot(props) {
  const ref = useRef();
  const { states, handlers } = useEventHandlers({
    ref,
    ...props,
  });
  const {
    style,
    className,
    testId,
    innerRef,
    values,
    reactProps,
  } = useRootProps(props, states);
  const noSelectStyles = exists(props.onClick)
    ? {
        cursor: "pointer",
        userSelect: "none",
        WebkitUserSelect: "none",
        KhtmlUserSelect: "none",
        MozUserSelect: "none",
      }
    : {};
  const disabled = states.includes(InteractionState.Disabled);
  const hotkeys = mergeHotkeys([
    useHotkey(
      {
        key: "space",
        allowInput: true,
        disabled,
      },
      () => ref.current.click()
    ),
    useHotkey(
      {
        key: "enter",
        allowInput: true,
        disabled,
      },
      () => ref.current.click()
    ),
  ]);

  const onKeyUp = (e) => {
    if (exists(handlers.onKeyUp)) {
      handlers.onKeyUp(e);
    }

    hotkeys.onKeyUp(e);
  };

  const onKeyDown = (e) => {
    if (exists(handlers.onKeyDown)) {
      handlers.onKeyDown(e);
    }

    hotkeys.onKeyDown(e);
  };

  const children = useSpacing(
    props.addSpacing,
    renderChildren(props.children, values)
  );
  return (
    <button
      tabIndex={0}
      ref={combineRef(props.measureRef, combineRef(innerRef, ref))}
      data-testid={testId}
      {...reactProps}
      {...handlers}
      onKeyUp={onKeyUp}
      onKeyDown={onKeyDown}
      className={className}
      style={{ ...noSelectStyles, ...style }}
    >
      {children}
    </button>
  );
}
