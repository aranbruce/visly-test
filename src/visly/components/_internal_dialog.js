// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useRef } from "react";
import { createPortal } from "react-dom";
import {
  useEventHandlers,
  useRootProps,
  combineRef,
  renderChildren,
} from "./_internal_utils";
import { FocusTrap } from "./_internal_focus_trap";
import { useHotkey } from "./_internal_utils_hotkeys";
export function DialogRoot(props) {
  const ref = useRef();
  const { states, handlers } = useEventHandlers({
    ref,
    ...props,
  });
  const {
    style,
    className,
    testId,
    innerRef,
    values,
    reactProps,
  } = useRootProps(props, states);
  const noSelectStyles = {
    userSelect: "none",
    WebkitUserSelect: "none",
    KhtmlUserSelect: "none",
    MozUserSelect: "none",
  };
  const hotkey = useHotkey(
    {
      key: "escape",
    },
    () => props.onClose()
  );

  if (props.renderInline) {
    return (
      <div
        ref={combineRef(props.measureRef, combineRef(innerRef, ref))}
        className={className}
        style={{ ...style, padding: 100 }}
      >
        {renderChildren(props.children, values)}
      </div>
    );
  }

  return props.isOpen
    ? createPortal(
        <FocusTrap>
          <div
            ref={combineRef(innerRef, ref)}
            data-testid={testId}
            {...reactProps}
            {...handlers}
            className={className}
            style={{
              ...style,
              ...noSelectStyles,
              display: "flex",
              position: "absolute",
              top: 0,
              left: 0,
              right: 0,
              bottom: 0,
              zIndex: 1000,
            }}
            onClick={() => props.onClose()}
            {...hotkey}
          >
            {renderChildren(props.children, values)}
          </div>
        </FocusTrap>,
        document.body
      )
    : null;
}
export function DialogContainerPrimitive(props) {
  const { children, className, measureRef } = props;
  return (
    <div
      ref={measureRef}
      onClick={(e) => e.stopPropagation()}
      className={className}
    >
      {children}
    </div>
  );
}
